name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v2.x

    - name: Cache SonarCloud packages
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven Wrapper
      uses: actions/cache@v2
      with:
        path: ./.mvn/wrapper/maven-wrapper.jar
        key: ${{ runner.os }}-mvn-wpr-${{ hashFiles('./.mvn/wrapper/maven-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-mvn-wpr

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven and analyse
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./mvnw -B -ntp verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

    - name: Publish to GitHub Packages Apache Maven
      env:
        GITHUB_TOKEN: ${{ github.token }}
        MAVEN_USERNAME: ${{ github.actor }}
        MAVEN_REPO_PASS: ${{ github.token }}
      run: ./mvnw -B -ntp -s .m2/settings.xml -P github deploy -DSkipTests

    - name: Login to GitHub Packages Docker
      env:
        CR_PAT: ${{ secrets.CR_PAT }}
      run: echo $CR_PAT | docker login ghcr.io -u olegkoskin --password-stdin
    - name: Build the Docker image
      env:
        DOCKER_BUILDKIT: 1
      run: docker build . -t acme-task
    - name: Get the docker image name
      id: vars
      env:
        REF_NAME: ${{ env.GITHUB_REF_SLUG_URL }}
      run: echo ::set-output name=image_name::$(echo ghcr.io/$GITHUB_REPOSITORY/acme-task_$REF_NAME)
    - name: Put the tags to the Docker image
      env:
        SHA_SHORT: ${{ env.GITHUB_SHA_SHORT }}
        IMAGE_NAME: ${{ steps.vars.outputs.image_name }}
      run: |
        docker tag acme-task $IMAGE_NAME:$SHA_SHORT
        docker tag acme-task $IMAGE_NAME:latest
    - name: Publish the tagged Docker image to GitHub Packages Docker
      env:
        SHA_SHORT: ${{ env.GITHUB_SHA_SHORT }}
        IMAGE_NAME: ${{ steps.vars.outputs.image_name }}
      run: docker push $IMAGE_NAME:$SHA_SHORT
    - name: Publish the latest Docker image to GitHub Packages Docker
      env:
        IMAGE_NAME: ${{ steps.vars.outputs.image_name }}
      run: docker push $IMAGE_NAME:latest